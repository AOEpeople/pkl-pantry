/// Module that can generate gitlab ci-components
/// See: https://docs.gitlab.com/ee/ci/components/
module com.gitlab.ci.schema.component
import "AbstractJob.pkl"
import "AbstractService.pkl"
import "pipeline.pkl"

/// Defines an item in spec.inputs of a gitlab-ci component
class SpecIntputItem {
  default: Boolean|Number|String?
  description: String?
}

/// Defines the spec part of a gitlab-ci component (first document in YAML)
class Spec {
  inputs: Mapping<String, SpecIntputItem>?
  function input(name: String): String = "$[[ inputs.\(name) ]]"
}

/// The actual spec definition for this component
spec: Spec

/// A instanciatable Job as shorthand
class Job extends AbstractJob

/// A instanciatable Service as shorthand
class Service extends AbstractService

/// The actual component definition for this component
component: pipeline

// This is the defined output of a gitlab-ci component
output {

  // The yaml output values. Gitlab Components are multi document files that are separating the spec (kind of a header)
  // from the actual pipeline or job definitions by '---'. As of this, we are sending the values as stream of documents
  // to the YamlRenderer.
  text = "# File generated by pkl package com.gitlab.ci.schema. DO NOT EDIT.\n" + super.text
  value = new Listing {
    new Mapping {
      // The Spec document
      ["spec"] = module.spec.toMap()
    }

    // The actual pipeline document.
    new Mapping {
      ...module.component.toMap()
      ...module.component.jobs.toMap()
    }
  }
  renderer = new YamlRenderer {
    isStream = true
    omitNullProperties = true

    converters {
      [Mapping] = (it) -> if (it.length == 0) null else it
      [Listing] = (it) -> if (it.length == 0) null else it
    }
  }
}
